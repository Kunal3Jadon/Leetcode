class Solution {
public:
    int dfs(vector<vector<int>> &a, vector<vector<int>> &visit, int r[], int c[], int i, int j, int cnt)
    {
        visit[i][j] = 1;
        for (int k = 0; k < 8; k++)
        {
            int nr = i + r[k];
            int nc = j + c[k];
            if (nr >= 0 && nr < a.size() && nc >= 0 && nc < a[0].size() && a[nr][nc] == cnt && visit[nr][nc] == 0)
            {
                // cout << nr << " " << nc << endl;
                return dfs(a, visit, r, c, nr, nc, cnt + 1);
            }
        }
        if (cnt != a.size() * a.size())
        {
            // cout << cnt;
            return 0;
        }
        return 1;
    }
    bool checkValidGrid(vector<vector<int>>& a) {
        int n = a.size();
        int m = a[0].size();
        vector<vector<int>> visit(n, vector<int>(m, 0));
        int cnt = 0;
        int r[8] = {-2, -1, 1, 2, 2, 1, -1, -2};
        int c[8] = {1, 2, 2, 1, -1, -2, -2, -1};
        if (a[0][0] == 0)
        {
            visit[0][0] = 1;
            return dfs(a, visit, r, c, 0, 0, cnt + 1);
        }
        else
            return 0;
    }
};
